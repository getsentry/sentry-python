# Tox (http://codespeak.net/~hpk/tox/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.
#
# This file has been generated from a template
# by "scripts/populate_tox/populate_tox.py". Any changes to the file should
# be made in the template (if you want to change a hardcoded part of the file)
# or in the script (if you want to change the auto-generated part).
# The file (and all resulting CI YAMLs) then needs to be regenerated via
# "scripts/generate-test-files.sh".

[tox]
requires =
    # This version introduced using pip 24.1 which does not work with older Celery and HTTPX versions.
    virtualenv<20.26.3
envlist =
    # === Common ===
    {py3.6,py3.7,py3.8,py3.9,py3.10,py3.11,py3.12,py3.13}-common

    # === Gevent ===
    {py3.6,py3.8,py3.10,py3.11,py3.12}-gevent

    # === Integrations ===

    # Asgi
    {py3.7,py3.12,py3.13}-asgi

    # AWS Lambda
    {py3.8,py3.9,py3.11,py3.13}-aws_lambda

    # Cloud Resource Context
    {py3.6,py3.12,py3.13}-cloud_resource_context

    # GCP
    {py3.7}-gcp

    # OpenTelemetry (OTel)
    {py3.7,py3.9,py3.12,py3.13}-opentelemetry

    # OpenTelemetry Experimental (POTel)
    {py3.8,py3.9,py3.10,py3.11,py3.12,py3.13}-potel

    # === Integrations - Auto-generated ===
    # These come from the populate_tox.py script.

    {% for group, integrations in groups.items() %}
    # ~~~ {{ group }} ~~~
    {% for integration in integrations %}
    {% for release in integration.releases %}
    {{ release.rendered_python_versions }}-{{ integration.name }}-v{{ release }}
    {% endfor %}

    {% endfor %}

    {% endfor %}

[testenv]
deps =
    # if you change requirements-testing.txt and your change is not being reflected
    # in what's installed by tox (when running tox locally), try running tox
    # with the -r flag
    -r requirements-testing.txt

    linters: -r requirements-linting.txt
    linters: werkzeug<2.3.0

    # === Common ===
    py3.8-common: hypothesis
    common: pytest-asyncio
    # See https://github.com/pytest-dev/pytest/issues/9621
    # and https://github.com/pytest-dev/pytest-forked/issues/67
    # for justification of the upper bound on pytest
    {py3.6,py3.7}-common: pytest<7.0.0
    {py3.8,py3.9,py3.10,py3.11,py3.12,py3.13}-common: pytest

    # === Gevent ===
    {py3.6,py3.7,py3.8,py3.9,py3.10,py3.11}-gevent: gevent>=22.10.0, <22.11.0
    {py3.12}-gevent: gevent
    # See https://github.com/pytest-dev/pytest/issues/9621
    # and https://github.com/pytest-dev/pytest-forked/issues/67
    # for justification of the upper bound on pytest
    {py3.6,py3.7}-gevent: pytest<7.0.0
    {py3.8,py3.9,py3.10,py3.11,py3.12}-gevent: pytest
    gevent: pytest-asyncio
    {py3.10,py3.11}-gevent: zope.event<5.0.0
    {py3.10,py3.11}-gevent: zope.interface<8.0

    # === Integrations ===

    # Asgi
    asgi: pytest-asyncio
    asgi: async-asgi-testclient

    # AWS Lambda
    aws_lambda: aws-cdk-lib
    aws_lambda: aws-sam-cli
    aws_lambda: boto3
    aws_lambda: fastapi
    aws_lambda: requests
    aws_lambda: uvicorn

    # OpenTelemetry (OTel)
    opentelemetry: opentelemetry-distro

    # OpenTelemetry Experimental (POTel)
    potel: -e .[opentelemetry-experimental]

    # === Integrations - Auto-generated ===
    # These come from the populate_tox.py script.

    {% for group, integrations in groups.items() %}
    # ~~~ {{ group }} ~~~
    {% for integration in integrations %}
    {% for release in integration.releases %}
    {% if integration.extra %}
    {{ integration.name }}-v{{ release }}: {{ integration.package }}[{{ integration.extra }}]=={{ release }}
    {% else %}
    {{ integration.name }}-v{{ release }}: {{ integration.package }}=={{ release }}
    {% endif %}
    {% endfor %}
    {% for dep in integration.dependencies %}
    {{ dep }}
    {% endfor %}

    {% endfor %}

    {% endfor %}

setenv =
    PYTHONDONTWRITEBYTECODE=1
    OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
    COVERAGE_FILE=.coverage-sentry-{envname}
    py3.6: COVERAGE_RCFILE=.coveragerc36

    django: DJANGO_SETTINGS_MODULE=tests.integrations.django.myapp.settings
    spark-v{3.0.3,3.5.6}: JAVA_HOME=/usr/lib/jvm/temurin-11-jdk-amd64

    # TESTPATH definitions for test suites not managed by toxgen
    common: TESTPATH=tests
    gevent: TESTPATH=tests
    asgi: TESTPATH=tests/integrations/asgi
    aws_lambda: TESTPATH=tests/integrations/aws_lambda
    cloud_resource_context: TESTPATH=tests/integrations/cloud_resource_context
    gcp: TESTPATH=tests/integrations/gcp
    opentelemetry: TESTPATH=tests/integrations/opentelemetry
    potel: TESTPATH=tests/integrations/opentelemetry
    socket: TESTPATH=tests/integrations/socket

    # These TESTPATH definitions are auto-generated by toxgen
    {% for integration, testpath in testpaths %}
    {{ integration }}: TESTPATH={{ testpath }}
    {% endfor %}

passenv =
    SENTRY_PYTHON_TEST_POSTGRES_HOST
    SENTRY_PYTHON_TEST_POSTGRES_USER
    SENTRY_PYTHON_TEST_POSTGRES_PASSWORD
    SENTRY_PYTHON_TEST_POSTGRES_NAME

usedevelop = True

extras =
    bottle: bottle
    falcon: falcon
    flask: flask
    pymongo: pymongo

basepython =
    py3.6: python3.6
    py3.7: python3.7
    py3.8: python3.8
    py3.9: python3.9
    py3.10: python3.10
    py3.11: python3.11
    py3.12: python3.12
    py3.13: python3.13

    # Python version is pinned here because flake8 actually behaves differently
    # depending on which version is used. You can patch this out to point to
    # some random Python 3 binary, but then you get guaranteed mismatches with
    # CI. Other tools such as mypy and black have options that pin the Python
    # version.
    linters: python3.12

commands =
    {py3.7,py3.8}-boto3: pip install urllib3<2.0.0

    ; https://github.com/pallets/flask/issues/4455
    {py3.7,py3.8,py3.9,py3.10,py3.11}-flask-v{1}: pip install "itsdangerous>=0.24,<2.0" "markupsafe<2.0.0" "jinja2<3.1.1"

    ; Running `pytest` as an executable suffers from an import error
    ; when loading tests in scenarios. In particular, django fails to
    ; load the settings from the test module.
    python -m pytest -W error::pytest.PytestUnraisableExceptionWarning {env:TESTPATH} -o junit_suite_name={envname} {posargs}

[testenv:linters]
commands =
    flake8 tests sentry_sdk
    black --check tests sentry_sdk
    mypy sentry_sdk
